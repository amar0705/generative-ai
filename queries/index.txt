1. Create a Customers table / collection with the following fields: id (unique identifier), name, email, address, and phone_number.

SQL: 

CREATE TABLE Customers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255),
    email VARCHAR(255),
    address VARCHAR(255),
    phone_number VARCHAR(20)
);

MongoDB:

db.createCollection("Customers");
db.Customers.createIndex({ "id": 1 }, { unique: true });
db.Customers.insertOne({
    name: "John Doe",
    email: "john.doe@example.com",
    address: "123 Main St",
    phone_number: "555-1234"
});

2.  Insert five rows / documents into the Customers table / collection with data of your choice.

SQL:

INSERT INTO Customers (name, email, address, phone_number)
VALUES
    ('Alice', 'alice@example.com', '123 First St', '555-1111'),
    ('Bob', 'bob@example.com', '456 Second St', '555-2222'),
    ('Charlie', 'charlie@example.com', '789 Third St', '555-3333'),
    ('David', 'david@example.com', '321 Fourth St', '555-4444'),
    ('Eve', 'eve@example.com', '654 Fifth St', '555-5555');

MongoDB:

db.Customers.insertMany([
    {
        name: "Alice",
        email: "alice@example.com",
        address: "123 First St",
        phone_number: "555-1111"
    },
    {
        name: "Bob",
        email: "bob@example.com",
        address: "456 Second St",
        phone_number: "555-2222"
    },
    {
        name: "Charlie",
        email: "charlie@example.com",
        address: "789 Third St",
        phone_number: "555-3333"
    },
    {
        name: "David",
        email: "david@example.com",
        address: "321 Fourth St",
        phone_number: "555-4444"
    },
    {
        name: "Eve",
        email: "eve@example.com",
        address: "654 Fifth St",
        phone_number: "555-5555"
    }
]);

3. Write a query to fetch all data from the Customers table / collection.

SQL:

SELECT * FROM Customers;

MongoDB:

db.Customers.find();

4.  Write a query to select only the name and email fields for all customers.

SQL:

SELECT name, email FROM Customers;

MongoDB:

db.Customers.find({}, { name: 1, email: 1, _id: 0 });

5. Write a query to fetch the customer with the id of 3.

SQL:

SELECT * FROM Customers WHERE id = 3;

MongoDB:

db.Customers.findOne({ id: 3 });

6. Write a query to fetch all customers whose name starts with 'A'.

SQL:

SELECT * FROM Customers WHERE name LIKE 'A%';

MongoDB:

db.Customers.find({ name: /^A/ });

7. Write a query to fetch all customers, ordered by name in descending order.

SQL:

SELECT * FROM Customers ORDER BY name DESC;

MongoDB:

db.Customers.find().sort({ name: -1 });

8. Write a query to update the address of the customer with id 4.

SQL:

UPDATE Customers SET address = 'New Address' WHERE id = 4;

MongoDB:

db.Customers.updateOne({ id: 4 }, { $set: { address: 'New Address' } });

9. Write a query to fetch the top 3 customers when ordered by id in ascending order.

SQL:

SELECT * FROM Customers ORDER BY id ASC LIMIT 3;

MongoDB:

db.Customers.find().sort({ id: 1 }).limit(3);

10. Write a query to delete the customer with id 2.

SQL:

DELETE FROM Customers WHERE id = 2;

MongoDB:

db.Customers.deleteOne({ id: 2 });

11. Write a query to count the number of customers.

SQL:

SELECT COUNT(*) AS customer_count FROM Customers;

MongoDB:

db.Customers.countDocuments();

12. Write a query to fetch all customers except the first two when ordered by id in ascending order.

SQL:

SELECT * FROM Customers ORDER BY id ASC OFFSET 2;

MongoDB:

db.Customers.find().sort({ id: 1 }).skip(2);

13. Write a query to fetch all customers whose id is greater than 2 and name starts with 'B'.

SQL:

SELECT * FROM Customers WHERE id > 2 AND name LIKE 'B%';

MongoDB:

db.Customers.find({ $and: [{ id: { $gt: 2 } }, { name: /^B/ }] });

14. Write a query to fetch all customers whose id is less than 3 or name ends with 's'.

SQL:

SELECT * FROM Customers WHERE id < 3 OR name LIKE '%s';

MongoDB:

db.Customers.find({ $or: [{ id: { $lt: 3 } }, { name: /s$/ }] });

15. Write a query to fetch all customers where the phone_number field is not set or is null.

SQL:

SELECT * FROM Customers WHERE phone_number IS NULL OR phone_number = '';

MongoDB:

db.Customers.find({ $or: [{ phone_number: { $exists: false } }, { phone_number: null }] });

